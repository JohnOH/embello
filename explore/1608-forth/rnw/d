\ load development code
\ needs l

reset

: shownum ( u -- )
  clear
  10 /mod 10 /mod 10 /mod
  -4 showdigit 28 showdigit 60 showdot 64 showdigit 96 showdigit
  display ;


: blink ( -- )  \ blink the on-board LED until a key is pressed
  OMODE-PP LED io-mode!  begin  LED iox!  100 ms  key? until ;

\ print out received packet info until a key is pressed
\ format: #bytes b3..b0 b7..b4 rssi lna afc
: r69try ( -- )
  42 8686 rf-init
  begin
    rf-recv  ?dup if
      cr . rf.buf @ hex. rf.buf 4 + @ hex. rf.rssi @ . rf.lna @ . rf.afc @ .
    then
  key? until ;

: lcdtry ( -- ) lcd-init show-logo  1000 ms  lcd-init demo ;
\ : tfttry ( -- ) tft-init demo ;
: digtry ( -- ) lcd-init 1234 shownum ;
: rtctry ( -- ) +i2c  0 0 rtc!  begin  0 rtc@ $FF and .  key? until ;
: adctry ( -- ) +adc  begin  PB0 adc .  key? until ;
: uartry ( -- ) +uart uart. ;
: pwmtry ( -- ) 1 LED +pwm 100 LED pwm ;
: r12try ( -- ) 5 868 rf12-init ." +" cr rf12-start begin rf12-poll key? until ;
: t69try ( n - ) 15 rf-power  0 <# #s #> 0 rf-send ;

\ -----------------------------------------------------------------------------

: freq-gen ( freq duty pin -- freq )  \ frequency with duty cycle 10/20/../90%
\ freq range is 110 Hz .. 7.2 MHz, but steps can be very coarse above 100 KHz
\ better dividers could be used, but this should be usable in the audio range
  >r ( freq duty R: pin ) 1 r@ +pwm       \ first set up basic pwm
  9 r@ p2tim timer-base TIM.ARR + !       \ reload value is 9, i.e. cycle 10
  10 / 10 swap - r@ pwm                   \ use 1..9, for use with PWM cycle 10
  7200000 dup rot /                       \ find best divider (may be too low)
  dup 1- r> p2tim timer-base TIM.PSC + !  \ set pre-scaler accordingly
  /                                       \ return actual freq (may be higher)
;

\ 1000 30 PA1 freq-gen .
\ -----------------------------------------------------------------------------
\ voltmeter with +/- 15V range

2274 variable Voff
34,32 2variable Vmul

: vreading ( pin -- value )  \ take an averaged ADC reading
  0  100 0 do over adc + loop  100 / nip ;

: vmeter ( -- )  \ a simple voltmeter on PA3
  +adc lcd-init
  begin cr
    0 PA3 vreading dup . Voff @ -  \ take a reading
    4095,0 f/ Vmul 2@ f*           \ convert to Volt
    2dup 3 f.n ." V"               \ display result on serial port
    100,0 f* abs shownum drop      \ and on the OLED display
    500 ms                         \ slow down
  key? until ;

\ vmeter
\ -----------------------------------------------------------------------------
\ vim: set ft=forth :
