// RF Node Watcher, displays last 4 received packets on the HY-TinySTM103.

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include "spi.h"
#include "rf69.h"

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please define SSD1306_128_64 in Adafruit_SSD1306.h");
#endif

RF69<SpiDev> rf;
Adafruit_SSD1306 oled;

extern const uint8_t logo_64x64[]; // defined below

static void initScreen () {
    // generate OLED supply internally from 3.3V
    oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);
    oled.clearDisplay();
    oled.drawBitmap(32, 00,  logo_64x64, 64, 64, 1);
    oled.display();
    delay(1000);
    oled.clearDisplay();
    oled.setTextColor(WHITE);
}

void setup()   {                
    Serial.begin(115200);
    Serial.println("[watcher]");
    initScreen();
    oled.println(" 868.6 MHz, group 42");
    oled.println(" Waiting for RF data");
    oled.display();
    rf.init(1, 42, 8686);
}

void loop() {
    uint8_t buffer [70];
    int n = rf.receive(buffer, sizeof buffer);
    if (n >= 0) {
        Serial.print("got #");
        Serial.print(n);
        Serial.print(':');
        for (int i = 0; i < n; ++i) {
            Serial.print(' ');
            Serial.print(buffer[i]);
        }
        Serial.println();

        static int yPos = 0;
        // clear the ">" in last line
        oled.fillRect(0, yPos, 6, 8, BLACK);
        // advance to next block, wrap at end
        yPos = (yPos + 16) % 64;
        // clear the next block
        oled.fillRect(0, yPos, 128, 16, BLACK);

        // marker and packet length
        oled.setCursor(0, yPos);
        oled.print("> ");
        oled.print(n);
        oled.print('b');
        
        // RSSI as dB
        oled.setCursor(42, yPos);
        oled.print('-');
        oled.print(rf.rssi/2);
        oled.print(rf.rssi & 1 ? ".5dB" : ".0dB");
        
        // AFC as signed offset
        int afc = rf.afc;
        oled.setCursor(96, yPos);
        if (rf.afc >= 0)
            oled.print('+');
        oled.print(rf.afc);
        
        // up to 10 bytes of payload as hex on 2nd line
        oled.setCursor(6, yPos + 8);
        for (int i = 0; i < n && i < 10; ++i) {
            const char* hex = "0123456789ABCDEF";
            oled.print(hex[buffer[i]>>4]);
            oled.print(hex[buffer[i]&15]);
        }

        oled.display();
    }
}

const uint8_t logo_64x64[] = { 
    0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,
    0x00,0x00,0x01,0xFF,0xFF,0x80,0x00,0x00,
    0x00,0x00,0x0F,0xFF,0xFF,0xF0,0x00,0x00,
    0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,
    0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
    0x00,0x01,0xFF,0xC0,0x03,0xFF,0x80,0x00,
    0x00,0x07,0xFC,0x00,0x00,0x7F,0xE0,0x00,
    0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,
    0x00,0x1F,0xC0,0x00,0x00,0x03,0xF8,0x00,
    0x00,0x3F,0x80,0x00,0x00,0x01,0xFC,0x00,
    0x00,0x7E,0x00,0x00,0x00,0x00,0x7E,0x00,
    0x00,0xFC,0x00,0x00,0x01,0x80,0x3F,0x00,
    0x01,0xF8,0x00,0x00,0x01,0x00,0x1F,0x80,
    0x03,0xF0,0x00,0x00,0x01,0x00,0x0F,0xC0,
    0x03,0xE0,0x00,0x00,0x03,0x00,0x07,0xC0,
    0x07,0xC0,0x00,0x07,0x82,0x00,0x03,0xE0,
    0x0F,0xC0,0x00,0x07,0xC6,0x00,0x03,0xF0,
    0x0F,0x80,0x00,0x0F,0xC4,0x00,0x01,0xF0,
    0x1F,0x00,0x00,0x0F,0x84,0x00,0x00,0xF8,
    0x1F,0x00,0x00,0x0F,0x8C,0x78,0x00,0xF8,
    0x3E,0x00,0x00,0x1F,0x88,0x7C,0x00,0x7C,
    0x3E,0x00,0x00,0x1F,0x08,0xFC,0x00,0x7C,
    0x3E,0x00,0x00,0x1F,0x18,0xF8,0x00,0x7C,
    0x7C,0x00,0x00,0x3E,0x10,0xF8,0x00,0x3E,
    0x7C,0x00,0x00,0x3E,0x31,0xF8,0x00,0x3E,
    0x7C,0x00,0x00,0x7E,0x31,0xF0,0x00,0x3E,
    0x78,0x00,0x00,0x7C,0x21,0xF1,0x80,0x1E,
    0x78,0x00,0x00,0x7C,0x63,0xE1,0x00,0x1E,
    0x78,0x00,0x00,0xFC,0x43,0xE1,0x00,0x1E,
    0xF8,0x00,0x00,0xF8,0x47,0xE3,0x00,0x1F,
    0xF8,0x00,0x00,0xF8,0xC7,0xC2,0x00,0x1F,
    0xFF,0xFF,0xFF,0xFF,0x87,0xC7,0xFF,0xFF,
    0xF8,0x00,0x03,0xF1,0x8F,0xC6,0x00,0x1F,
    0xF8,0x00,0x01,0xF1,0x8F,0x84,0x00,0x1F,
    0xF8,0x00,0x03,0xE1,0x0F,0x8C,0x00,0x1F,
    0x78,0x00,0x03,0xE3,0x1F,0x88,0x00,0x1E,
    0x78,0x00,0x07,0xE2,0x1F,0x08,0x00,0x1E,
    0x78,0x08,0x07,0xC2,0x1F,0x00,0x00,0x1E,
    0x7C,0x7C,0x07,0xC6,0x3E,0x00,0x00,0x3E,
    0x7C,0x7C,0x0F,0xC4,0x3E,0x00,0x00,0x3E,
    0x3C,0x7E,0x1F,0x84,0x7E,0x00,0x00,0x3C,
    0x3E,0x7F,0xFF,0x8C,0x7F,0xFF,0xF0,0x7C,
    0x3E,0x3F,0xFF,0x08,0x7F,0xFF,0xF0,0x7C,
    0x1E,0x1F,0xFE,0x18,0xFF,0xFF,0xF0,0x78,
    0x1F,0x0F,0xFC,0x18,0xFF,0xFF,0xF0,0xF8,
    0x1F,0x07,0xF0,0x21,0xFF,0xFF,0xF0,0xF0,
    0x0F,0x80,0x00,0x30,0x00,0x00,0x01,0xF0,
    0x0F,0xC0,0x00,0x20,0x00,0x00,0x03,0xF0,
    0x07,0xC0,0x00,0x20,0x00,0x00,0x03,0xE0,
    0x03,0xE0,0x00,0x60,0x00,0x00,0x07,0xC0,
    0x03,0xF0,0x00,0x40,0x00,0x00,0x0F,0xC0,
    0x01,0xF8,0x00,0x40,0x00,0x00,0x1F,0x80,
    0x00,0xFC,0x00,0x00,0x00,0x00,0x3F,0x00,
    0x00,0x7E,0x00,0x00,0x00,0x00,0x7E,0x00,
    0x00,0x3F,0x80,0x00,0x00,0x01,0xFC,0x00,
    0x00,0x1F,0xC0,0x00,0x00,0x03,0xF8,0x00,
    0x00,0x0F,0xF0,0x00,0x00,0x0F,0xF0,0x00,
    0x00,0x07,0xFE,0x00,0x00,0x7F,0xE0,0x00,
    0x00,0x01,0xFF,0xC0,0x03,0xFF,0x80,0x00,
    0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
    0x00,0x00,0x3F,0xFF,0xFF,0xFC,0x00,0x00,
    0x00,0x00,0x07,0xFF,0xFF,0xE0,0x00,0x00,
    0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00,
    0x00,0x00,0x00,0x07,0xE0,0x00,0x00,0x00,
};
